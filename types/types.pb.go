// Code generated by protoc-gen-go. DO NOT EDIT.
// source: types.proto

/*
Package types is a generated protocol buffer package.

It is generated from these files:
	types.proto

It has these top-level messages:
	Currency
	Balance
	Account
	Symbol
	Ticker
	Trade
	Depth
	Depths
	Kline
	Order
*/
package types

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type OrderType int32

const (
	OrderType_LimitBuy   OrderType = 0
	OrderType_LimitSell  OrderType = 1
	OrderType_MarketBuy  OrderType = 2
	OrderType_MarketSell OrderType = 3
	OrderType_IocBuy     OrderType = 4
	OrderType_IocSell    OrderType = 5
	OrderType_StopLimit  OrderType = 6
	OrderType_StopMarket OrderType = 7
)

var OrderType_name = map[int32]string{
	0: "LimitBuy",
	1: "LimitSell",
	2: "MarketBuy",
	3: "MarketSell",
	4: "IocBuy",
	5: "IocSell",
	6: "StopLimit",
	7: "StopMarket",
}
var OrderType_value = map[string]int32{
	"LimitBuy":   0,
	"LimitSell":  1,
	"MarketBuy":  2,
	"MarketSell": 3,
	"IocBuy":     4,
	"IocSell":    5,
	"StopLimit":  6,
	"StopMarket": 7,
}

func (x OrderType) String() string {
	return proto.EnumName(OrderType_name, int32(x))
}
func (OrderType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type OrderStatus int32

const (
	OrderStatus_New             OrderStatus = 0
	OrderStatus_Submitted       OrderStatus = 1
	OrderStatus_PartialFilled   OrderStatus = 2
	OrderStatus_PartialCanceled OrderStatus = 3
	OrderStatus_Filled          OrderStatus = 4
	OrderStatus_Canceled        OrderStatus = 5
	OrderStatus_Expired         OrderStatus = 6
)

var OrderStatus_name = map[int32]string{
	0: "New",
	1: "Submitted",
	2: "PartialFilled",
	3: "PartialCanceled",
	4: "Filled",
	5: "Canceled",
	6: "Expired",
}
var OrderStatus_value = map[string]int32{
	"New":             0,
	"Submitted":       1,
	"PartialFilled":   2,
	"PartialCanceled": 3,
	"Filled":          4,
	"Canceled":        5,
	"Expired":         6,
}

func (x OrderStatus) String() string {
	return proto.EnumName(OrderStatus_name, int32(x))
}
func (OrderStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

// a special instruction used when placing a trade to indicate how long an order will remain active before it is executed or expires
type ForceType int32

const (
	// Good till cancel. GTC order won't close until it is filled. default
	ForceType_GTC ForceType = 0
	// An immediate or cancel order is an order to buy or sell that must be executed immediately, and any portion of the order that cannot be immediately filled is cancelled.
	ForceType_IOC ForceType = 1
	// Fill or kill is a type of time-in-force designation used in securities trading that instructs a brokerage to execute a transaction immediately and completely or not at all.
	ForceType_FOK ForceType = 2
	// Keeps the order active until the end of the trading day in UTC.
	ForceType_DAY ForceType = 3
	// Good till date specified in expireTime.
	ForceType_GTD ForceType = 4
)

var ForceType_name = map[int32]string{
	0: "GTC",
	1: "IOC",
	2: "FOK",
	3: "DAY",
	4: "GTD",
}
var ForceType_value = map[string]int32{
	"GTC": 0,
	"IOC": 1,
	"FOK": 2,
	"DAY": 3,
	"GTD": 4,
}

func (x ForceType) String() string {
	return proto.EnumName(ForceType_name, int32(x))
}
func (ForceType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type Currency struct {
	// identifier
	Id int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// BTC
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// Bitcoin
	Desc string `protobuf:"bytes,3,opt,name=desc" json:"desc,omitempty"`
	// Is currency belongs to blockchain (false for ICO and fiat, like YCC,CNY)
	Crypto bool `protobuf:"varint,4,opt,name=crypto" json:"crypto,omitempty"`
	// Is allowed for deposit (false for ICO)
	PayinEnabled bool `protobuf:"varint,5,opt,name=payinEnabled" json:"payinEnabled,omitempty"`
	// Is required to provide additional information other than the address for deposit
	PayinPaymentId bool `protobuf:"varint,6,opt,name=payinPaymentId" json:"payinPaymentId,omitempty"`
	// Blocks confirmations count for deposit
	PayinConfirmations int32 `protobuf:"varint,7,opt,name=payinConfirmations" json:"payinConfirmations,omitempty"`
	// Is allowed for withdraw (false for ICO)
	PayoutEnabled bool `protobuf:"varint,8,opt,name=payoutEnabled" json:"payoutEnabled,omitempty"`
	// Is allowed to provide additional information for withdraw
	PayoutPaymentId bool `protobuf:"varint,9,opt,name=payoutPaymentId" json:"payoutPaymentId,omitempty"`
	// Is allowed to transfer between trading and account (may be disabled on maintain)
	TransferEnabled bool `protobuf:"varint,10,opt,name=transferEnabled" json:"transferEnabled,omitempty"`
	// Is stopped deposit and trading
	Delisted bool `protobuf:"varint,11,opt,name=delisted" json:"delisted,omitempty"`
	// Withdraw fee
	PayoutFee float32 `protobuf:"fixed32,12,opt,name=payoutFee" json:"payoutFee,omitempty"`
}

func (m *Currency) Reset()                    { *m = Currency{} }
func (m *Currency) String() string            { return proto.CompactTextString(m) }
func (*Currency) ProtoMessage()               {}
func (*Currency) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Currency) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Currency) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Currency) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *Currency) GetCrypto() bool {
	if m != nil {
		return m.Crypto
	}
	return false
}

func (m *Currency) GetPayinEnabled() bool {
	if m != nil {
		return m.PayinEnabled
	}
	return false
}

func (m *Currency) GetPayinPaymentId() bool {
	if m != nil {
		return m.PayinPaymentId
	}
	return false
}

func (m *Currency) GetPayinConfirmations() int32 {
	if m != nil {
		return m.PayinConfirmations
	}
	return 0
}

func (m *Currency) GetPayoutEnabled() bool {
	if m != nil {
		return m.PayoutEnabled
	}
	return false
}

func (m *Currency) GetPayoutPaymentId() bool {
	if m != nil {
		return m.PayoutPaymentId
	}
	return false
}

func (m *Currency) GetTransferEnabled() bool {
	if m != nil {
		return m.TransferEnabled
	}
	return false
}

func (m *Currency) GetDelisted() bool {
	if m != nil {
		return m.Delisted
	}
	return false
}

func (m *Currency) GetPayoutFee() float32 {
	if m != nil {
		return m.PayoutFee
	}
	return 0
}

type Balance struct {
	Currency string  `protobuf:"bytes,1,opt,name=currency" json:"currency,omitempty"`
	Active   float32 `protobuf:"fixed32,2,opt,name=active" json:"active,omitempty"`
	Frozen   float32 `protobuf:"fixed32,3,opt,name=frozen" json:"frozen,omitempty"`
}

func (m *Balance) Reset()                    { *m = Balance{} }
func (m *Balance) String() string            { return proto.CompactTextString(m) }
func (*Balance) ProtoMessage()               {}
func (*Balance) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Balance) GetCurrency() string {
	if m != nil {
		return m.Currency
	}
	return ""
}

func (m *Balance) GetActive() float32 {
	if m != nil {
		return m.Active
	}
	return 0
}

func (m *Balance) GetFrozen() float32 {
	if m != nil {
		return m.Frozen
	}
	return 0
}

type Account struct {
	Id      string     `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Wallets []*Balance `protobuf:"bytes,2,rep,name=wallets" json:"wallets,omitempty"`
}

func (m *Account) Reset()                    { *m = Account{} }
func (m *Account) String() string            { return proto.CompactTextString(m) }
func (*Account) ProtoMessage()               {}
func (*Account) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Account) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Account) GetWallets() []*Balance {
	if m != nil {
		return m.Wallets
	}
	return nil
}

type Symbol struct {
	// identifier, "ETHBTC"
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// ETH
	BaseCurrency string `protobuf:"bytes,2,opt,name=baseCurrency" json:"baseCurrency,omitempty"`
	// BTC
	QuotoCurrency string `protobuf:"bytes,3,opt,name=quotoCurrency" json:"quotoCurrency,omitempty"`
	// 0.000001
	PricePrecision float32 `protobuf:"fixed32,4,opt,name=pricePrecision" json:"pricePrecision,omitempty"`
	// 0.001
	AmountPrecision float32 `protobuf:"fixed32,5,opt,name=amountPrecision" json:"amountPrecision,omitempty"`
	// BTC
	FeeCurrency string `protobuf:"bytes,6,opt,name=feeCurrency" json:"feeCurrency,omitempty"`
	// 0.001
	FeeRate float32 `protobuf:"fixed32,7,opt,name=feeRate" json:"feeRate,omitempty"`
	// eg: huobi.pro "main主区"，"innovation创新区"，"bifurcation分叉区"
	Partion string `protobuf:"bytes,8,opt,name=partion" json:"partion,omitempty"`
}

func (m *Symbol) Reset()                    { *m = Symbol{} }
func (m *Symbol) String() string            { return proto.CompactTextString(m) }
func (*Symbol) ProtoMessage()               {}
func (*Symbol) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Symbol) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Symbol) GetBaseCurrency() string {
	if m != nil {
		return m.BaseCurrency
	}
	return ""
}

func (m *Symbol) GetQuotoCurrency() string {
	if m != nil {
		return m.QuotoCurrency
	}
	return ""
}

func (m *Symbol) GetPricePrecision() float32 {
	if m != nil {
		return m.PricePrecision
	}
	return 0
}

func (m *Symbol) GetAmountPrecision() float32 {
	if m != nil {
		return m.AmountPrecision
	}
	return 0
}

func (m *Symbol) GetFeeCurrency() string {
	if m != nil {
		return m.FeeCurrency
	}
	return ""
}

func (m *Symbol) GetFeeRate() float32 {
	if m != nil {
		return m.FeeRate
	}
	return 0
}

func (m *Symbol) GetPartion() string {
	if m != nil {
		return m.Partion
	}
	return ""
}

type Ticker struct {
	// Best buy price
	Bid float32 `protobuf:"fixed32,1,opt,name=bid" json:"bid,omitempty"`
	// Best sell price
	Ask float32 `protobuf:"fixed32,2,opt,name=ask" json:"ask,omitempty"`
	// Last trade price
	Last float32 `protobuf:"fixed32,3,opt,name=last" json:"last,omitempty"`
	// Last trade price 24 hours ago
	Open float32 `protobuf:"fixed32,4,opt,name=open" json:"open,omitempty"`
	// owest trade price within 24 hours
	Low float32 `protobuf:"fixed32,5,opt,name=low" json:"low,omitempty"`
	// Highest trade price within 24 hours
	High float32 `protobuf:"fixed32,6,opt,name=high" json:"high,omitempty"`
	// Total trading amount within 24 hours in base currency
	VolumeBase float32 `protobuf:"fixed32,7,opt,name=volumeBase" json:"volumeBase,omitempty"`
	// Total trading amount within 24 hours in quote currency
	VolumeQuote float32 `protobuf:"fixed32,8,opt,name=volumeQuote" json:"volumeQuote,omitempty"`
	// Last update or refresh ticker time(ms)
	Ts int64 `protobuf:"varint,9,opt,name=ts" json:"ts,omitempty"`
	// trading symbol
	Symbol string `protobuf:"bytes,10,opt,name=symbol" json:"symbol,omitempty"`
}

func (m *Ticker) Reset()                    { *m = Ticker{} }
func (m *Ticker) String() string            { return proto.CompactTextString(m) }
func (*Ticker) ProtoMessage()               {}
func (*Ticker) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Ticker) GetBid() float32 {
	if m != nil {
		return m.Bid
	}
	return 0
}

func (m *Ticker) GetAsk() float32 {
	if m != nil {
		return m.Ask
	}
	return 0
}

func (m *Ticker) GetLast() float32 {
	if m != nil {
		return m.Last
	}
	return 0
}

func (m *Ticker) GetOpen() float32 {
	if m != nil {
		return m.Open
	}
	return 0
}

func (m *Ticker) GetLow() float32 {
	if m != nil {
		return m.Low
	}
	return 0
}

func (m *Ticker) GetHigh() float32 {
	if m != nil {
		return m.High
	}
	return 0
}

func (m *Ticker) GetVolumeBase() float32 {
	if m != nil {
		return m.VolumeBase
	}
	return 0
}

func (m *Ticker) GetVolumeQuote() float32 {
	if m != nil {
		return m.VolumeQuote
	}
	return 0
}

func (m *Ticker) GetTs() int64 {
	if m != nil {
		return m.Ts
	}
	return 0
}

func (m *Ticker) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

type Trade struct {
	MtfId     string    `protobuf:"bytes,1,opt,name=mtfId" json:"mtfId,omitempty"`
	Symbol    string    `protobuf:"bytes,2,opt,name=symbol" json:"symbol,omitempty"`
	ActiveId  string    `protobuf:"bytes,3,opt,name=activeId" json:"activeId,omitempty"`
	PassiveId string    `protobuf:"bytes,4,opt,name=passiveId" json:"passiveId,omitempty"`
	Price     float32   `protobuf:"fixed32,5,opt,name=price" json:"price,omitempty"`
	Amount    float32   `protobuf:"fixed32,6,opt,name=amount" json:"amount,omitempty"`
	Type      OrderType `protobuf:"varint,7,opt,name=type,enum=types.OrderType" json:"type,omitempty"`
	// Fee currency see in symbol config
	Fee float32 `protobuf:"fixed32,8,opt,name=fee" json:"fee,omitempty"`
	// trade match time(ms)
	Ts int64 `protobuf:"varint,9,opt,name=ts" json:"ts,omitempty"`
}

func (m *Trade) Reset()                    { *m = Trade{} }
func (m *Trade) String() string            { return proto.CompactTextString(m) }
func (*Trade) ProtoMessage()               {}
func (*Trade) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Trade) GetMtfId() string {
	if m != nil {
		return m.MtfId
	}
	return ""
}

func (m *Trade) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func (m *Trade) GetActiveId() string {
	if m != nil {
		return m.ActiveId
	}
	return ""
}

func (m *Trade) GetPassiveId() string {
	if m != nil {
		return m.PassiveId
	}
	return ""
}

func (m *Trade) GetPrice() float32 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *Trade) GetAmount() float32 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *Trade) GetType() OrderType {
	if m != nil {
		return m.Type
	}
	return OrderType_LimitBuy
}

func (m *Trade) GetFee() float32 {
	if m != nil {
		return m.Fee
	}
	return 0
}

func (m *Trade) GetTs() int64 {
	if m != nil {
		return m.Ts
	}
	return 0
}

type Depth struct {
	Price  float32 `protobuf:"fixed32,1,opt,name=price" json:"price,omitempty"`
	Amount float32 `protobuf:"fixed32,2,opt,name=amount" json:"amount,omitempty"`
}

func (m *Depth) Reset()                    { *m = Depth{} }
func (m *Depth) String() string            { return proto.CompactTextString(m) }
func (*Depth) ProtoMessage()               {}
func (*Depth) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *Depth) GetPrice() float32 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *Depth) GetAmount() float32 {
	if m != nil {
		return m.Amount
	}
	return 0
}

type Depths struct {
	Asks []*Depth `protobuf:"bytes,1,rep,name=asks" json:"asks,omitempty"`
	Bids []*Depth `protobuf:"bytes,2,rep,name=bids" json:"bids,omitempty"`
}

func (m *Depths) Reset()                    { *m = Depths{} }
func (m *Depths) String() string            { return proto.CompactTextString(m) }
func (*Depths) ProtoMessage()               {}
func (*Depths) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *Depths) GetAsks() []*Depth {
	if m != nil {
		return m.Asks
	}
	return nil
}

func (m *Depths) GetBids() []*Depth {
	if m != nil {
		return m.Bids
	}
	return nil
}

type Kline struct {
	Open        float32 `protobuf:"fixed32,1,opt,name=open" json:"open,omitempty"`
	Close       float32 `protobuf:"fixed32,2,opt,name=close" json:"close,omitempty"`
	Min         float32 `protobuf:"fixed32,3,opt,name=min" json:"min,omitempty"`
	Max         float32 `protobuf:"fixed32,4,opt,name=max" json:"max,omitempty"`
	VolumeBase  float32 `protobuf:"fixed32,5,opt,name=volumeBase" json:"volumeBase,omitempty"`
	VolumeQuote float32 `protobuf:"fixed32,6,opt,name=volumeQuote" json:"volumeQuote,omitempty"`
	// time(ms)
	Ts int64 `protobuf:"varint,7,opt,name=ts" json:"ts,omitempty"`
}

func (m *Kline) Reset()                    { *m = Kline{} }
func (m *Kline) String() string            { return proto.CompactTextString(m) }
func (*Kline) ProtoMessage()               {}
func (*Kline) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *Kline) GetOpen() float32 {
	if m != nil {
		return m.Open
	}
	return 0
}

func (m *Kline) GetClose() float32 {
	if m != nil {
		return m.Close
	}
	return 0
}

func (m *Kline) GetMin() float32 {
	if m != nil {
		return m.Min
	}
	return 0
}

func (m *Kline) GetMax() float32 {
	if m != nil {
		return m.Max
	}
	return 0
}

func (m *Kline) GetVolumeBase() float32 {
	if m != nil {
		return m.VolumeBase
	}
	return 0
}

func (m *Kline) GetVolumeQuote() float32 {
	if m != nil {
		return m.VolumeQuote
	}
	return 0
}

func (m *Kline) GetTs() int64 {
	if m != nil {
		return m.Ts
	}
	return 0
}

type Order struct {
	Id            string  `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Symbol        string  `protobuf:"bytes,2,opt,name=symbol" json:"symbol,omitempty"`
	Price         float32 `protobuf:"fixed32,3,opt,name=price" json:"price,omitempty"`
	PlaceQuantity float32 `protobuf:"fixed32,4,opt,name=placeQuantity" json:"placeQuantity,omitempty"`
	DoneQuantity  float32 `protobuf:"fixed32,5,opt,name=doneQuantity" json:"doneQuantity,omitempty"`
	// based on quote currency
	Cost float32 `protobuf:"fixed32,6,opt,name=cost" json:"cost,omitempty"`
	// depends on symbol's fee currency
	FilledFee float32 `protobuf:"fixed32,7,opt,name=filledFee" json:"filledFee,omitempty"`
	// time(ms)
	CreatedAt  int64       `protobuf:"varint,8,opt,name=createdAt" json:"createdAt,omitempty"`
	CanceledAt int64       `protobuf:"varint,9,opt,name=canceledAt" json:"canceledAt,omitempty"`
	UpdatedAt  int64       `protobuf:"varint,10,opt,name=updatedAt" json:"updatedAt,omitempty"`
	Type       OrderType   `protobuf:"varint,11,opt,name=type,enum=types.OrderType" json:"type,omitempty"`
	Status     OrderStatus `protobuf:"varint,12,opt,name=status,enum=types.OrderStatus" json:"status,omitempty"`
	// extra info
	AccountId   string    `protobuf:"bytes,13,opt,name=accountId" json:"accountId,omitempty"`
	TimeInForce ForceType `protobuf:"varint,14,opt,name=timeInForce,enum=types.ForceType" json:"timeInForce,omitempty"`
	Source      string    `protobuf:"bytes,15,opt,name=source" json:"source,omitempty"`
	StopPrice   float32   `protobuf:"fixed32,16,opt,name=stopPrice" json:"stopPrice,omitempty"`
	FeeRate     float32   `protobuf:"fixed32,17,opt,name=feeRate" json:"feeRate,omitempty"`
}

func (m *Order) Reset()                    { *m = Order{} }
func (m *Order) String() string            { return proto.CompactTextString(m) }
func (*Order) ProtoMessage()               {}
func (*Order) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *Order) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Order) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func (m *Order) GetPrice() float32 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *Order) GetPlaceQuantity() float32 {
	if m != nil {
		return m.PlaceQuantity
	}
	return 0
}

func (m *Order) GetDoneQuantity() float32 {
	if m != nil {
		return m.DoneQuantity
	}
	return 0
}

func (m *Order) GetCost() float32 {
	if m != nil {
		return m.Cost
	}
	return 0
}

func (m *Order) GetFilledFee() float32 {
	if m != nil {
		return m.FilledFee
	}
	return 0
}

func (m *Order) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *Order) GetCanceledAt() int64 {
	if m != nil {
		return m.CanceledAt
	}
	return 0
}

func (m *Order) GetUpdatedAt() int64 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

func (m *Order) GetType() OrderType {
	if m != nil {
		return m.Type
	}
	return OrderType_LimitBuy
}

func (m *Order) GetStatus() OrderStatus {
	if m != nil {
		return m.Status
	}
	return OrderStatus_New
}

func (m *Order) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

func (m *Order) GetTimeInForce() ForceType {
	if m != nil {
		return m.TimeInForce
	}
	return ForceType_GTC
}

func (m *Order) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *Order) GetStopPrice() float32 {
	if m != nil {
		return m.StopPrice
	}
	return 0
}

func (m *Order) GetFeeRate() float32 {
	if m != nil {
		return m.FeeRate
	}
	return 0
}

func init() {
	proto.RegisterType((*Currency)(nil), "types.Currency")
	proto.RegisterType((*Balance)(nil), "types.Balance")
	proto.RegisterType((*Account)(nil), "types.Account")
	proto.RegisterType((*Symbol)(nil), "types.Symbol")
	proto.RegisterType((*Ticker)(nil), "types.Ticker")
	proto.RegisterType((*Trade)(nil), "types.Trade")
	proto.RegisterType((*Depth)(nil), "types.Depth")
	proto.RegisterType((*Depths)(nil), "types.Depths")
	proto.RegisterType((*Kline)(nil), "types.Kline")
	proto.RegisterType((*Order)(nil), "types.Order")
	proto.RegisterEnum("types.OrderType", OrderType_name, OrderType_value)
	proto.RegisterEnum("types.OrderStatus", OrderStatus_name, OrderStatus_value)
	proto.RegisterEnum("types.ForceType", ForceType_name, ForceType_value)
}

func init() { proto.RegisterFile("types.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1073 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x56, 0xc1, 0x6e, 0xdb, 0x46,
	0x10, 0x0d, 0x29, 0x91, 0xb2, 0x46, 0xb6, 0xc2, 0x6c, 0x83, 0x82, 0x28, 0x8a, 0x42, 0x10, 0x82,
	0x42, 0xf0, 0x21, 0x07, 0x17, 0x05, 0x7a, 0xb5, 0xe5, 0xb8, 0x10, 0x92, 0xd6, 0x0e, 0xed, 0x1e,
	0x7a, 0x5c, 0x91, 0xab, 0x7a, 0x61, 0x92, 0xcb, 0x72, 0x97, 0x71, 0xd4, 0x4b, 0xef, 0x3d, 0x14,
	0xe8, 0x57, 0xf4, 0xc7, 0xda, 0xff, 0x28, 0x66, 0x76, 0x49, 0x51, 0x6a, 0xd2, 0xde, 0xe6, 0xbd,
	0x99, 0xe1, 0xcc, 0xce, 0xbc, 0x5d, 0x09, 0x26, 0x66, 0x5b, 0x09, 0xfd, 0xb2, 0xaa, 0x95, 0x51,
	0x2c, 0x20, 0x30, 0xff, 0x6d, 0x00, 0x47, 0xcb, 0xa6, 0xae, 0x45, 0x99, 0x6e, 0xd9, 0x14, 0x7c,
	0x99, 0xc5, 0xde, 0xcc, 0x5b, 0x04, 0x89, 0x2f, 0x33, 0xc6, 0x60, 0x58, 0xf2, 0x42, 0xc4, 0xfe,
	0xcc, 0x5b, 0x8c, 0x13, 0xb2, 0x91, 0xcb, 0x84, 0x4e, 0xe3, 0x81, 0xe5, 0xd0, 0x66, 0x9f, 0x42,
	0x98, 0xd6, 0xdb, 0xca, 0xa8, 0x78, 0x38, 0xf3, 0x16, 0x47, 0x89, 0x43, 0x6c, 0x0e, 0xc7, 0x15,
	0xdf, 0xca, 0xf2, 0x55, 0xc9, 0xd7, 0xb9, 0xc8, 0xe2, 0x80, 0xbc, 0x7b, 0x1c, 0xfb, 0x12, 0xa6,
	0x84, 0x6f, 0xf8, 0xb6, 0x10, 0xa5, 0x59, 0x65, 0x71, 0x48, 0x51, 0x07, 0x2c, 0x7b, 0x09, 0x8c,
	0x98, 0xa5, 0x2a, 0x37, 0xb2, 0x2e, 0xb8, 0x91, 0xaa, 0xd4, 0xf1, 0x88, 0x7a, 0xfd, 0x80, 0x87,
	0xbd, 0x80, 0x93, 0x8a, 0x6f, 0x55, 0x63, 0xda, 0xe2, 0x47, 0xf4, 0xd9, 0x7d, 0x92, 0x2d, 0xe0,
	0xa9, 0x25, 0x76, 0xe5, 0xc7, 0x14, 0x77, 0x48, 0x63, 0xa4, 0xa9, 0x79, 0xa9, 0x37, 0xa2, 0x6e,
	0xbf, 0x08, 0x36, 0xf2, 0x80, 0x66, 0x9f, 0xc1, 0x51, 0x26, 0x72, 0xa9, 0x8d, 0xc8, 0xe2, 0x09,
	0x85, 0x74, 0x98, 0x7d, 0x0e, 0x63, 0xfb, 0xe1, 0x2b, 0x21, 0xe2, 0xe3, 0x99, 0xb7, 0xf0, 0x93,
	0x1d, 0x31, 0xff, 0x01, 0x46, 0x17, 0x3c, 0xe7, 0x65, 0x2a, 0xf0, 0x23, 0xa9, 0x5b, 0x0b, 0x2d,
	0x64, 0x9c, 0x74, 0x18, 0xc7, 0xcd, 0x53, 0x23, 0xdf, 0xd9, 0xc5, 0xf8, 0x89, 0x43, 0xc8, 0x6f,
	0x6a, 0xf5, 0x8b, 0x28, 0x69, 0x39, 0x7e, 0xe2, 0xd0, 0x7c, 0x09, 0xa3, 0xf3, 0x34, 0x55, 0x4d,
	0x69, 0x7a, 0x1b, 0x1e, 0xd3, 0x86, 0x17, 0x30, 0x7a, 0xe4, 0x79, 0x2e, 0x8c, 0x8e, 0xfd, 0xd9,
	0x60, 0x31, 0x39, 0x9b, 0xbe, 0xb4, 0x22, 0x71, 0x7d, 0x24, 0xad, 0x7b, 0xfe, 0xbb, 0x0f, 0xe1,
	0xed, 0xb6, 0x58, 0xab, 0xbc, 0x93, 0x85, 0xd7, 0x93, 0xc5, 0x1c, 0x8e, 0xd7, 0x5c, 0x8b, 0x56,
	0x4a, 0x4e, 0x32, 0x7b, 0x1c, 0xae, 0xe4, 0xe7, 0x46, 0x19, 0xd5, 0x05, 0x59, 0x0d, 0xed, 0x93,
	0x24, 0x88, 0x5a, 0xa6, 0xe2, 0xa6, 0x16, 0xa9, 0xd4, 0x52, 0x95, 0x24, 0x2a, 0x3f, 0x39, 0x60,
	0x71, 0x21, 0xbc, 0xc0, 0x43, 0xed, 0x02, 0x03, 0x0a, 0x3c, 0xa4, 0xd9, 0x0c, 0x26, 0x1b, 0xb1,
	0x6b, 0x2d, 0xa4, 0xaa, 0x7d, 0x8a, 0xc5, 0x30, 0xda, 0x08, 0x91, 0x70, 0x23, 0x48, 0x51, 0x7e,
	0xd2, 0x42, 0xf4, 0x54, 0xbc, 0x46, 0x49, 0x91, 0x80, 0xc6, 0x49, 0x0b, 0xe7, 0x7f, 0x79, 0x10,
	0xde, 0xc9, 0xf4, 0x41, 0xd4, 0x2c, 0x82, 0xc1, 0xda, 0x8d, 0xd5, 0x4f, 0xd0, 0x44, 0x86, 0xeb,
	0x07, 0xb7, 0x1f, 0x34, 0x71, 0x68, 0x39, 0xd7, 0xc6, 0xad, 0x86, 0x6c, 0xe4, 0x54, 0x25, 0xda,
	0x03, 0x92, 0x8d, 0x99, 0xb9, 0x7a, 0x74, 0x47, 0x41, 0x13, 0xa3, 0xee, 0xe5, 0x4f, 0xf7, 0xd4,
	0xb7, 0x9f, 0x90, 0xcd, 0xbe, 0x00, 0x78, 0xa7, 0xf2, 0xa6, 0x10, 0x17, 0x5c, 0xb7, 0x3d, 0xf7,
	0x18, 0x3c, 0xb2, 0x45, 0x6f, 0x1b, 0x65, 0x04, 0xb5, 0xee, 0x27, 0x7d, 0x0a, 0x95, 0x60, 0x34,
	0x89, 0x7d, 0x90, 0xf8, 0x46, 0xa3, 0x78, 0x34, 0xad, 0x97, 0x64, 0x3d, 0x4e, 0x1c, 0x9a, 0xff,
	0xed, 0x41, 0x70, 0x57, 0xf3, 0x4c, 0xb0, 0xe7, 0x10, 0x14, 0x66, 0xb3, 0x6a, 0xe5, 0x63, 0x41,
	0x2f, 0xcf, 0xef, 0xe7, 0xa1, 0x80, 0xad, 0x2c, 0x57, 0x99, 0xdb, 0x73, 0x87, 0xed, 0x2d, 0xd0,
	0xda, 0x3a, 0x87, 0xe4, 0xdc, 0x11, 0x58, 0x87, 0x56, 0xed, 0x66, 0x60, 0x01, 0x89, 0x9e, 0xf6,
	0xea, 0xe6, 0xe0, 0x10, 0x7b, 0x01, 0x43, 0x54, 0x2c, 0xcd, 0x60, 0x7a, 0x16, 0x39, 0xf9, 0x5e,
	0xd7, 0x99, 0xa8, 0xef, 0xb6, 0x95, 0x48, 0xc8, 0x8b, 0x53, 0xdd, 0x88, 0x76, 0x0e, 0x68, 0x1e,
	0x9e, 0x7f, 0xfe, 0x35, 0x04, 0x97, 0xa2, 0x32, 0xf7, 0xbb, 0xf2, 0xde, 0x87, 0xcb, 0xfb, 0xfd,
	0xf2, 0xf3, 0x37, 0x10, 0x52, 0x9a, 0x66, 0x33, 0x18, 0x72, 0xfd, 0xa0, 0x63, 0x8f, 0xee, 0xd1,
	0xb1, 0x6b, 0x84, 0x9c, 0x09, 0x79, 0x30, 0x62, 0x2d, 0xb3, 0xf6, 0xa6, 0x1d, 0x44, 0xa0, 0x67,
	0xfe, 0xa7, 0x07, 0xc1, 0xeb, 0x5c, 0x96, 0xa2, 0x93, 0x86, 0xd7, 0x93, 0xc6, 0x73, 0x08, 0xd2,
	0x5c, 0xe9, 0xf6, 0xda, 0x5b, 0x80, 0x47, 0x2b, 0x64, 0x7b, 0xe5, 0xd1, 0x24, 0x86, 0xbf, 0x77,
	0xaa, 0x42, 0xf3, 0x40, 0x2e, 0xc1, 0xff, 0xc9, 0x25, 0xfc, 0x98, 0x5c, 0x46, 0xdd, 0xb8, 0xfe,
	0x18, 0x42, 0x40, 0x43, 0xfe, 0xd7, 0x93, 0xf2, 0x31, 0x41, 0x74, 0x73, 0x1d, 0xf4, 0xe7, 0x8a,
	0xcf, 0x74, 0xce, 0x53, 0xf1, 0xb6, 0xe1, 0xa5, 0x91, 0x66, 0xeb, 0xba, 0xde, 0x27, 0xf1, 0x75,
	0xc9, 0x54, 0xb9, 0x0b, 0xb2, 0x27, 0xd8, 0xe3, 0x70, 0x62, 0xa9, 0xd2, 0xad, 0x3c, 0xc8, 0x46,
	0xa1, 0x6d, 0x64, 0x9e, 0x8b, 0x0c, 0x9f, 0x5b, 0x7b, 0x4b, 0x76, 0x04, 0x7a, 0xd3, 0x5a, 0x70,
	0x23, 0xb2, 0x73, 0x43, 0xd2, 0x18, 0x24, 0x3b, 0x02, 0x67, 0x96, 0xe2, 0x13, 0x98, 0x93, 0xdb,
	0x0a, 0xa5, 0xc7, 0x60, 0x76, 0x53, 0x65, 0x2e, 0x1b, 0x6c, 0x76, 0x47, 0x74, 0xb2, 0x9c, 0xfc,
	0xa7, 0x2c, 0x4f, 0x21, 0xd4, 0x86, 0x9b, 0x46, 0xd3, 0x6f, 0xc1, 0xf4, 0x8c, 0xf5, 0xe3, 0x6e,
	0xc9, 0x93, 0xb8, 0x08, 0xac, 0xc7, 0xed, 0x2b, 0xbe, 0xca, 0xe2, 0x13, 0x7b, 0x69, 0x3a, 0x82,
	0x9d, 0xc1, 0xc4, 0xc8, 0x42, 0xac, 0xca, 0x2b, 0x55, 0xa7, 0x22, 0x9e, 0xee, 0x95, 0x25, 0x8e,
	0xca, 0xf6, 0x83, 0x68, 0x53, 0xaa, 0xc1, 0xf0, 0xa7, 0x6e, 0x53, 0x84, 0xb0, 0x92, 0x36, 0xaa,
	0xba, 0xa1, 0x6d, 0x45, 0x76, 0x6a, 0x1d, 0xd1, 0x7f, 0x2b, 0x9f, 0xed, 0xbd, 0x95, 0xa7, 0xbf,
	0xc2, 0xb8, 0x3b, 0x20, 0x3b, 0x86, 0xa3, 0x37, 0xb2, 0x90, 0xe6, 0xa2, 0xd9, 0x46, 0x4f, 0xd8,
	0x09, 0x8c, 0x09, 0xdd, 0x8a, 0x3c, 0x8f, 0x3c, 0x84, 0xdf, 0xf1, 0xfa, 0x41, 0x90, 0xd7, 0x67,
	0x53, 0x00, 0x0b, 0xc9, 0x3d, 0x60, 0x00, 0xe1, 0x4a, 0xa5, 0xe8, 0x1b, 0xb2, 0x09, 0x8c, 0x56,
	0x2a, 0x25, 0x47, 0x80, 0x79, 0xb7, 0x46, 0x55, 0xf4, 0xa9, 0x28, 0xc4, 0x3c, 0x84, 0x36, 0x37,
	0x1a, 0x9d, 0x1a, 0x98, 0xf4, 0x26, 0xc7, 0x46, 0x30, 0xf8, 0x5e, 0x3c, 0xda, 0xea, 0xb7, 0xcd,
	0xba, 0x90, 0xc6, 0x88, 0x2c, 0xf2, 0xd8, 0x33, 0x38, 0xb9, 0xc1, 0x47, 0x9c, 0xe7, 0x57, 0xa4,
	0x85, 0xc8, 0x67, 0x9f, 0xc0, 0x53, 0x47, 0x2d, 0xdd, 0x86, 0x6d, 0x1b, 0x2e, 0x60, 0x88, 0xc7,
	0xe9, 0x3c, 0x01, 0x36, 0xf5, 0xea, 0x7d, 0x25, 0x6b, 0x91, 0x45, 0xe1, 0xe9, 0x37, 0x30, 0xee,
	0x06, 0x8c, 0x35, 0xbf, 0xbd, 0x5b, 0x46, 0x4f, 0xd0, 0x58, 0x5d, 0x2f, 0x23, 0x0f, 0x8d, 0xab,
	0xeb, 0xd7, 0x91, 0x8f, 0xc6, 0xe5, 0xf9, 0x8f, 0xd1, 0xc0, 0xc6, 0x5c, 0x46, 0xc3, 0x75, 0x48,
	0x7f, 0xc5, 0xbe, 0xfa, 0x27, 0x00, 0x00, 0xff, 0xff, 0x51, 0x95, 0x38, 0x23, 0x99, 0x09, 0x00,
	0x00,
}
